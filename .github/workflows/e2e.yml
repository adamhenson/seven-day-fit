name: E2E on Vercel Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install
        run: npm ci

      - name: Get Vercel preview URL for this commit
        id: preview
        shell: bash
        run: |
          set -euo pipefail
          SHA=${{ github.event.pull_request.head.sha }}
          TEAM_QS=""; if [[ -n "${VERCEL_ORG_ID:-}" ]]; then TEAM_QS="&teamId=${VERCEL_ORG_ID}"; fi
          URL=""
          for i in {1..24}; do
            RESP=$(curl -sS -H "Authorization: Bearer $VERCEL_TOKEN" \
              "https://api.vercel.com/v13/deployments?projectId=$VERCEL_PROJECT_ID&target=preview&meta-githubCommitSha=$SHA$TEAM_QS&limit=1") || true
            URL=$(echo "$RESP" | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const j=JSON.parse(d);const dep=(j.deployments&&j.deployments[0])||null;if(!dep){process.exit(2)}const u=dep.url||'';console.log(u.startsWith('http')?u:'https://'+u)}catch{process.exit(3)}})") || true
            if [[ -n "$URL" ]]; then break; fi
            echo "Waiting for Vercel preview deployment... ($i)"; sleep 5
          done
          if [[ -z "$URL" ]]; then echo "Preview not found"; exit 1; fi
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Install Playwright browsers
        run: npm -w apps/e2e run install:browsers

      - name: Run Playwright against preview
        env:
          E2E_BASE_URL: ${{ steps.preview.outputs.url }}
        run: npm -w apps/e2e test


